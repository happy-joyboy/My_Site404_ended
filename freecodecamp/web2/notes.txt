In the CSS box model, every HTML element is treated as a box with four areas.
The content is surrounded by a space called padding, similar to how bubble wrap separates an item from the box around it.
Think of the border like the cardboard box your item was shipped in.

Margin is the area outside of the box, and can be used to control the space between other boxes or elements.
Here the bottom element has a larger top margin, pushing it further down the page.

Use padding to adjust the spacing within an element.


Now .one is centered horizontally, but its top margin is pushing past the canvas and onto the frame's border, shifting the entire canvas down 20 pixels.

Add padding of 1px to the .canvas element to give the .one element something solid to push off of.
Adding 1 pixel of padding to the top, bottom, left, and right of the canvas changed its dimensions to 502 pixels x 602 pixels.
Replace the padding property with overflow set to hidden - changing the canvas back to its original dimensions.

Use the filter property to blur the painting 
Round each corner using the border-radius property.

Rotate each rectangle to give them more of an imperfect, hand-painted look.

Use the transform property on the .one selector to rotate it counter clockwise by 0.6 degrees.

Notice how the blue image border extends beyond the red gallery border. This is due to the way browsers calculate the size of container elements.

The box-sizing property is used to set this behavior. By default, the content-box model is used. With this model, when an element has a specific width, that width is calculated based only on the element's content. Padding and border values get added to the total width, so the element grows to accommodate these values.

The border-box sizing model does the opposite of content-box. The total width of the element, including padding and border, will be the explicit width set. The content of the element will shrink to make room for the padding and border.

 Make the text uppercase using the text-transform property with uppercase as the value.

Flexbox is a one-dimensional CSS layout that can control the way items are spaced out and aligned within a container.

To use it, give an element a display property of flex. This will make the element a flex container. Any direct children of a flex container are called flex items.

Flexbox has a main and cross axis. The main axis is defined by the flex-direction property, which has four possible values:

    row (default): horizontal axis with flex items from left to right
    row-reverse: horizontal axis with flex items from right to left
    column: vertical axis with flex items from top to bottom
    column-reverse: vertical axis with flex items from bottom to top

Note: The axes and directions will be different depending on the text direction. The values shown are for a left-to-right text direction.

The flex-wrap property determines how your flex items behave when the flex container is too small. Setting it to wrap will allow the items to wrap to the next row or column. nowrap (default) will prevent your items from wrapping and shrink them if needed.

The justify-content property determines how the items inside a flex container are positioned along the main axis, affecting their position and the space around them.

The align-items property positions the flex content along the cross axis. In this case, with your flex-direction set to row, your cross axis would be vertical.

Notice how some of your images have become distorted. This is because the images have different aspect ratios. Rather than setting each aspect ratio individually, you can use the object-fit property to determine how images should behave. et it to cover. This will tell the image to fill the img container while maintaining aspect ratio, resulting in cropping to fit.

The gap CSS shorthand property sets the gaps, also known as gutters, between rows and columns. The gap property and its row-gap and column-gap sub-properties provide this functionality for flex, grid, and multi-column layout. You apply the property to the container element

(i think this to not mess with margin of each element)

The ::after pseudo-element creates an element that is the last child of the selected element. You can use it to add an empty element after the last image. If you give it the same width as the images it will push the last image to the left when the gallery is in a two-column layout. Right now, it is in the center because you set justify-content: center on the flex container.

typography

Borders can be used to group and prioritize content.
Good use of white space can bring focus to the important elements of your page, and help guide your user's eyes through your text.


################
If you inspect your .label element with your browser's developer tools, you may notice that it's actually 288 pixels wide instead of 270. This is because, by default, the browser includes the border and padding when determining an element's size.

To solve this, reset the box model by creating a * selector and giving it a box-sizing property of border-box.
#############

 set the font-weight property to 800. This will make text bolder.

The letter-spacing property can be used to adjust the space between each character of text in an element.

Rather than targeting each element that needs to be bold, it is more efficient to use a class to apply the bold styling to every element.

Horizontal spacing between equally important elements can increase the readability of your text.
Wrap the text in a span element. 
Now we can add the horizontal spacing using flex. In your p selector, add a display property set to flex and a justify-content property set to space-between.  (this is because of the span)

The rem unit stands for root em, and is relative to the font size of the html element.
display property set to flex. Also give it a justify-content property set to space-between and align-items property set to flex-end.  ( yes there is a span)

Typography is often more art than science. You may have to tweak things like alignment until it looks correct.

 Create a .right selector and use the justify-content property to do it.
.right{
  justify-content: flex-end;
}

Notice how the text 8g appears centered in the preview. Nest the span element containing the text Total Fat along with the text 8g, in an additional span element for alignment. (sso00 if there if there is something between 2 spans it will be centered and to add it to one of the other spans you need to but them together in a bigger span ......)

The :not pseudo-selector can be used to select all elements that do not match the given CSS rule.
Example Code

div:not(#example) {
  color: red;
}
.daily-value p:not(.no-divider)   (    .    for class)     


The above selects all div elements without an id of example.

The advantage to creating these dividers is that you can apply specific classes to style them individually. Add double-indent to the class for your last .divider. (so by creating a div only to use it as a divider or an  empty div element .... you are given extra flexibility)

text-indent property  specifies the indentation of the first line in a text-block. Note: Negative values are allowed
$$$$$$$##############$$$$$$$$$$$$
&&&&&&&& Accessibility is making your webpage easy for all people to use â€“ even people with disabilities.

the meta elements, a viewport definition tells the browser how to render the page. Including one betters visual accessibility on mobile, and improves SEO (search engine optimization).

Add a viewport definition with a content attribute detailing the width and initial-scale of the page.
 <meta name="viewport" content="width=device-width, initial-scale=1">



Another important meta element for accessibility and SEO is the description definition. The value of the content attribute is used by search engines to provide a description of your page.

Add a meta element with the name attribute set to description, and give it a useful content attribute.

Lastly in the head, the title element is useful for screen readers to understand the content of a page. Furthermore, it is an important part of SEO.
you should not make the title longer than 60 characters.



Navigation is a core part of accessibility, and screen readers rely on you to provide the structure of your page. This is accomplished with semantic HTML elements.

Add a header and a main element to your page.

The header element will be used to introduce the page, as well as provide a navigation menu.

The main element will contain the core content of your page.

Within the header, provide context about the page by nesting one img, h1, and nav element.

A useful property of an SVG (scalable vector graphics) is that it contains a path attribute which allows the image to be scaled without affecting the resolution of the resultant image.

Currently, the img is assuming its default size, which is too large. CSS has a max function which returns the largest of a set of comma-separated values. For example:
Example Code

img {
  width: max(250px, 25vw);
}

In the above example, the width of the image will be 250px if the viewport width is less than 1000 pixels. If the viewport width is greater than 1000 pixels, the width of the image will be 25vw. This is because 25vw is equal to 25% of the viewport width.

Scale the image using its id as a selector, and setting the width to be the maximum of 10rem or 18vw.



The child combinator selector > is used between selectors to target only elements that match the second selector and are a direct child of the first selector.

This can be helpful when you have deeply nested elements and want to control the scope of your styling.

Use the > selector to target the unordered list elements within the nav elements, and use Flexbox to evenly space the children.
nav > ul {
  display:flex;
  justify-content:space-evenly;
}

To increase the page accessibility, the role attribute can be used to indicate the purpose behind an element on the page to assistive technologies. The role attribute is a part of the Web Accessibility Initiative (WAI), and accepts preset values.

Every region role requires a label, which helps screen reader users understand the purpose of the region. One method for adding a label is to add a heading element inside the region and then reference it with the aria-labelledby attribute.

Typeface plays an important role in the accessibility of a page. Some fonts are easier to read than others, and this is especially true on low-resolution screens.

Change the font for both the h1 and h2 elements to Verdana, and use another web-safe font in the sans-serif family as a fallback.

To be able to navigate within the page, give each anchor element an href corresponding to the id of the h2 elements.

It is important to link each input to the corresponding label element. This provides assistive technology users with a visual reference to the input.

This is done by giving the label a for attribute, which contains the id of the input.
Keeping in mind best-practices for form inputs, give each input an appropriate type and name attribute. Then, give the first input a placeholder attribute.



Even though you added a placeholder to the first input element in the previous lesson, this is actually not a best-practice for accessibility; too often, users confuse the placeholder text with an actual input value - they think there is already a value in the input.

Remove the placeholder text from the first input element, relying on the label being the best-practice.

The question numbers are not descriptive enough. This is especially true for visually impaired users. One way to get around such an issue, without having to add visible text to the element, is to add text only a screen reader can read.



The .sr-only text is still visible. There is a common pattern to visually hide text for only screen readers to read.

This pattern is to set the following CSS properties:
Example Code

position: absolute;
width: 1px;
height: 1px;
padding: 0;
margin: -1px;
overflow: hidden;
clip: rect(0, 0, 0, 0);
white-space: nowrap;
border: 0;

Use the above to define the .sr-only CSS rule.

Although not required for label elements with a nested input, it is still best-practice to explicitly link a label with its corresponding input element.



If you click on the radio inputs, you might notice both inputs within the same true/false fieldset can be selected at the same time.

Group the relevant inputs together such that only one input from a pair can be selected at a time.
using name attribute 

To prevent unnecessary repetition, target the before pseudo-element of the h3 element, and give it a content property of "Question #"
h3::before{
  content:"Question #";
}

Nest one textarea element within the second div.answer element, and set the number of rows and columns it has.
<textarea rows="5" cols="2"></textarea>

Two final semantic HTML elements for this project are the footer and address elements. The footer element is a container for a collection of content that is related to the page, and the address element is a container for contact information for the author of the page.



Within the address element, add the following:
Example Code

freeCodeCamp<br />
San Francisco<br />
California<br />
USA

The br tags will allow each part of the address to be on its own line and are useful for presenting address elements properly.


The address element does not have to contain a physical geographical location. It can be used to provide a link to the subject.

Wrap a link around the text freeCodeCamp, and set its location to https://freecodecamp.org.
On the topic of visual accessibility, contrast between elements is a key factor. For example, the contrast between the text and the background of a heading should be at least 4.5:1.

To make the navigation buttons look more like typical buttons, remove the underline from the anchor tags.

Then, create a new selector targeting the navigation list elements so that when the cursor hovers over them, the background color and text color are switched, and the cursor becomes a pointer.

nav > ul > li:hover {
  background-color: #dfdfe2;
  color: #1b1b32;
  cursor: pointer;
}



Tidy up the header, by using Flexbox to put space between the children, and vertically center them.

Then, fix the header to the top of the viewport.
header {
  width: 100%;
  height: 50px;
  background-color: #1b1b32;
  display: flex;
  justify-content:space-between;
  align-items:center;
  position:fixed;
  top:0;
}



On small screens, the unordered list in the navigation bar overflows the right side of the screen.

Fix this by using Flexbox to wrap the ul content. Then, set the following CSS properties to correctly align the text:
Example Code

align-items: center;
padding-inline-start: 0;
margin-block: 0;
height: 100%;


To align the input boxes with each other, create a new ruleset that targets all input and label elements within an .info element and set the display property to inline-block.

Also, align the label element's text to the right.

It is useful to see the default border around the fieldset elements, during development. However, it might not be the style you want.

While ul/li elements are great at providing bullets for list items, your radio buttons don't need them. You can control what the bullets look with the list-style property. For example you can turn your bullets into circles with the following:
Example Code

ul {
  list-style: circle;
}

Give the submit button a freeCodeCamp-style design, with the following CSS properties: 
using button



Clicking on the navigation links should jump the viewport to the relevant section. However, this jumping can be disorienting for some users.

Select all elements, and set the scroll-behavior to smooth.
*{
  scroll-behavior:smooth;
}



Certain types of motion-based animations can cause discomfort for some users. In particular, people with vestibular disorders have sensitivity to certain motion triggers.

The @media at-rule has a media feature called prefers-reduced-motion to set CSS based on the user's preferences. It can take one of the following values:

    reduce
    no-preference

Example Code

@media (feature: value) {
  selector {
    styles
  }
}

Wrap the style rule that sets scroll-behavior: smooth within an @media at-rule with the media feature prefers-reduced-motion having no-preference set as the value.
@media(prefers-reduced-motion: no-preference){
  * {
  scroll-behavior: smooth;
}
}

Finally, the navigation accessibility can be improved by providing keyboard shortcuts.

The accesskey attribute accepts a space-separated list of access keys. For example:
Example Code

<button type="submit" accesskey="s">Submit</button>

Give each of the navigation links a single-letter access key.

Note: It is not always advised to use access keys, but they can be useful


